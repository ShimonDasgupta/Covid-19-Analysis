{
	"name": "PolicyDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Policy",
						"type": "DatasetReference"
					},
					"name": "Policy"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PolicyParquet",
						"type": "DatasetReference"
					},
					"name": "policysink"
				}
			],
			"transformations": [
				{
					"name": "Renaming"
				}
			],
			"scriptLines": [
				"source(output(",
				"          countryname as string,",
				"          countrycode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          date as string,",
				"          c1_school_closing as integer,",
				"          c1_flag as integer,",
				"          c2_workplace_closing as integer,",
				"          c2_flag as integer,",
				"          c3_cancel_public_events as integer,",
				"          c3_flag as integer,",
				"          c4_restrictions_on_gatherings as integer,",
				"          c4_flag as integer,",
				"          c5_close_public_transport as integer,",
				"          c5_flag as integer,",
				"          c6_stay_at_home_requirements as integer,",
				"          c6_flag as integer,",
				"          c7_restrictions_on_internal_movement as integer,",
				"          c7_flag as integer,",
				"          c8_international_travel_controls as integer,",
				"          e1_income_support as integer,",
				"          e1_flag as integer,",
				"          {e2_debt/contract_relief} as integer,",
				"          e3_fiscal_measures as integer,",
				"          e4_international_support as integer,",
				"          h1_public_information_campaigns as integer,",
				"          h1_flag as integer,",
				"          h2_testing_policy as integer,",
				"          h3_contact_tracing as integer,",
				"          h4_emergency_investment_in_healthcare as integer,",
				"          h5_investment_in_vaccines as integer,",
				"          {H6_Facial Coverings} as integer,",
				"          H6_Flag as integer,",
				"          {H7_Vaccination policy} as integer,",
				"          H7_Flag as integer,",
				"          {H8_Protection of elderly people} as integer,",
				"          H8_Flag as integer,",
				"          M1_Wildcard as integer,",
				"          stringencyindex as integer,",
				"          stringencyindexfordisplay as integer,",
				"          StringencyLegacyIndex as integer,",
				"          StringencyLegacyIndexForDisplay as integer,",
				"          GovernmentResponseIndex as integer,",
				"          GovernmentResponseIndexForDisplay as integer,",
				"          ContainmentHealthIndex as integer,",
				"          ContainmentHealthIndexForDisplay as integer,",
				"          EconomicSupportIndex as integer,",
				"          EconomicSupportIndexForDisplay as integer,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Policy",
				"Policy select(mapColumn(",
				"          countryname,",
				"          countrycode,",
				"          RegionName,",
				"          RegionCode,",
				"          Jurisdiction,",
				"          date,",
				"          c1schoolclosing = c1_school_closing,",
				"          c1flag = c1_flag,",
				"          c2workplaceclosing = c2_workplace_closing,",
				"          c2flag = c2_flag,",
				"          c3cancelpublicevents = c3_cancel_public_events,",
				"          c3flag = c3_flag,",
				"          c4restrictionsongatherings = c4_restrictions_on_gatherings,",
				"          c4flag = c4_flag,",
				"          c5closepublictransport = c5_close_public_transport,",
				"          c5flag = c5_flag,",
				"          c6stayathomerequirements = c6_stay_at_home_requirements,",
				"          c6flag = c6_flag,",
				"          c7restrictionsoninternalmovement = c7_restrictions_on_internal_movement,",
				"          c7flag = c7_flag,",
				"          c8internationaltravelcontrols = c8_international_travel_controls,",
				"          e1incomesupport = e1_income_support,",
				"          e1flag = e1_flag,",
				"          {e2debt/contractrelief} = {e2_debt/contract_relief},",
				"          e3fiscalmeasures = e3_fiscal_measures,",
				"          e4internationalsupport = e4_international_support,",
				"          h1publicinformationcampaigns = h1_public_information_campaigns,",
				"          h1flag = h1_flag,",
				"          h2testingpolicy = h2_testing_policy,",
				"          h3contacttracing = h3_contact_tracing,",
				"          h4emergencyinvestment_in_healthcare = h4_emergency_investment_in_healthcare,",
				"          h5investmentinvaccines = h5_investment_in_vaccines,",
				"          H6FacialCoverings = {H6_Facial Coverings},",
				"          H6Flag = H6_Flag,",
				"          H7Vaccinationpolicy = {H7_Vaccination policy},",
				"          H7Flag = H7_Flag,",
				"          H8Protectionofelderlypeople = {H8_Protection of elderly people},",
				"          H8Flag = H8_Flag,",
				"          M1Wildcard = M1_Wildcard,",
				"          stringencyindex,",
				"          stringencyindexfordisplay,",
				"          StringencyLegacyIndex,",
				"          StringencyLegacyIndexForDisplay,",
				"          GovernmentResponseIndex,",
				"          GovernmentResponseIndexForDisplay,",
				"          ContainmentHealthIndex,",
				"          ContainmentHealthIndexForDisplay,",
				"          EconomicSupportIndex,",
				"          EconomicSupportIndexForDisplay,",
				"          id,",
				"          rid = {_rid},",
				"          self = {_self},",
				"          etag = {_etag},",
				"          attachments = {_attachments},",
				"          ts = {_ts}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Renaming",
				"Renaming sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['policy.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> policysink"
			]
		}
	}
}